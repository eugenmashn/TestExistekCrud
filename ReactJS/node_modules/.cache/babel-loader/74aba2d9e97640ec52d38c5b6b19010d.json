{"ast":null,"code":"import { set_Post, edit_Post, new_Post, set_Loading } from \"../redux/Post/actionsPost\";\nimport urlApi from './UrlRequest';\nexport const GetPosts = page => async dispatch => {\n  try {\n    const requestOptions = {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      },\n      body: JSON.stringify({\n        match: {},\n        sort: {},\n        limit: 10,\n        page: page\n      })\n    };\n    debugger;\n    fetch(urlApi + '/post/filterPosts', requestOptions).then(res => res.json()).then(data => {\n      debugger;\n      dispatch(set_Post(data));\n      dispatch(set_Loading(true));\n    }).catch(e => {\n      console.log(e);\n    });\n  } catch {\n    dispatch(set_Loading(false));\n    console.log('Error!');\n  }\n};\nexport const GetPost = index => async (dispatch) => {\n  try {\n    const requestOptions = {\n      method: 'GET',\n      mode: 'cors',\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    };\n    fetch(urlApi + '/post/getById/' + index, requestOptions).then(res => res.json()).then(data => {\n      dispatch(new_Post(data));\n      dispatch(set_Loading(true));\n    }).catch(e => {\n      console.log(e);\n    });\n  } catch {\n    console.log('Error!');\n  }\n};\nexport const DeletePost = post => async (dispatch) => {\n  try {\n    let token = localStorage.getItem(\"token\");\n    const requestOptions = {\n      method: 'DeLETE',\n      mode: 'cors',\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\",\n        \"Token\": token\n      }\n    };\n    fetch(urlApi + '/post/removePost/' + post._id, requestOptions).then(res => res.json()).then(data => {}).catch(e => {\n      console.log(e);\n    });\n  } catch {\n    console.log('Error!');\n  }\n};\nexport const NewPost = (post, author) => async (dispatch) => {\n  try {\n    debugger;\n    post.author = author;\n    let token = localStorage.getItem(\"token\");\n    post._id = null;\n    post.location = {};\n    post.viewersCount = 0;\n    const requestOptions = {\n      method: 'PUT',\n      mode: 'cors',\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\",\n        \"Token\": token\n      },\n      body: JSON.stringify({ ...post\n      })\n    };\n    debugger;\n    fetch(urlApi + '/post/createPost', requestOptions).then(res => res.json()).then(data => {\n      const res = {\n        data\n      };\n      dispatch(new_Post(res));\n    }).catch(e => {\n      console.log(e);\n    });\n  } catch {\n    dispatch(set_Loading(false));\n    console.log('Error!');\n  }\n};\nexport const EditPost = post => async (dispatch) => {\n  try {\n    try {\n      let token = localStorage.getItem(\"token\");\n      post.author = \"tesast@mail.com\";\n      post.location = {};\n      const requestOptions = {\n        method: 'patch',\n        mode: 'cors',\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\",\n          \"Token\": token\n        },\n        body: JSON.stringify({ ...post\n        })\n      };\n      fetch(urlApi + '/post/updatePost', requestOptions).then(res => res.json()).then(data => {\n        const res = {\n          data\n        };\n        dispatch(edit_Post(res));\n      }).catch(e => {\n        console.log(e);\n      });\n    } catch {\n      dispatch(set_Loading(false));\n      console.log('Error!');\n    }\n  } catch {\n    console.log('Error!');\n  }\n};\n\nfunction urltoFile(url, filename, mimeType) {\n  return fetch(url).then(function (res) {\n    return res.arrayBuffer();\n  }).then(function (buf) {\n    return new File([buf], filename, {\n      type: mimeType\n    });\n  });\n}\n\nexport const arrayBufferToBase64 = buffer => {\n  debugger;\n  var binary = '';\n  var bytes = [].slice.call(new Uint8Array(buffer));\n  bytes.forEach(b => binary += String.fromCharCode(b));\n  return window.btoa(binary);\n};","map":{"version":3,"sources":["D:/Source/Project/ReactJS/src/services/post_services.js"],"names":["set_Post","edit_Post","new_Post","set_Loading","urlApi","GetPosts","page","dispatch","requestOptions","method","mode","headers","body","JSON","stringify","match","sort","limit","fetch","then","res","json","data","catch","e","console","log","GetPost","index","DeletePost","post","token","localStorage","getItem","_id","NewPost","author","location","viewersCount","EditPost","urltoFile","url","filename","mimeType","arrayBuffer","buf","File","type","arrayBufferToBase64","buffer","binary","bytes","slice","call","Uint8Array","forEach","b","String","fromCharCode","window","btoa"],"mappings":"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","sourcesContent":["import { set_Post,edit_Post ,new_Post, set_Loading} from \"../redux/Post/actionsPost\";\r\nimport urlApi from './UrlRequest'\r\n\r\nexport const GetPosts =  (page) => async dispatch=>{ \r\n\r\n    try {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            mode:'cors',\r\n            headers: { \r\n                \"Content-type\": \"application/json; charset=UTF-8\",\r\n            },\r\n            body: JSON.stringify({\r\n                    match:{},\r\n                    sort:{},\r\n                    limit: 10,\r\n                    page: page\r\n                })\r\n        };\r\n        debugger;\r\n        fetch(urlApi+'/post/filterPosts', requestOptions)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                debugger;\r\n                dispatch(set_Post(data));\r\n                dispatch(set_Loading(true));\r\n            })\r\n            .catch((e)=>{\r\n                console.log(e);\r\n            });\r\n        } catch{\r\n            dispatch(set_Loading(false));\r\n            console.log('Error!');\r\n        }\r\n    }\r\n\r\n \r\n\r\nexport const GetPost =(index)=> async (dispatch) =>\r\n{\r\n    \r\n    try {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            mode:'cors',\r\n            headers: { \r\n                \"Content-type\": \"application/json; charset=UTF-8\",\r\n            }\r\n        };\r\n       fetch(urlApi+'/post/getById/'+index, requestOptions)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                dispatch(new_Post(data)); \r\n                dispatch(set_Loading(true));\r\n            })\r\n            .catch((e)=>{\r\n                \r\n                console.log(e);\r\n            });\r\n        }  catch{\r\n            console.log('Error!');\r\n        }\r\n}\r\n\r\n\r\nexport const DeletePost = (post) => async (dispatch) =>\r\n{\r\n    try {\r\n\r\n        let token =  localStorage.getItem(\"token\");\r\n        const requestOptions = {\r\n            method: 'DeLETE',\r\n            mode:'cors',\r\n            headers: { \r\n                \"Content-type\": \"application/json; charset=UTF-8\",\r\n                \"Token\": token\r\n            }\r\n        };\r\n       fetch(urlApi+'/post/removePost/' + post._id, requestOptions)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n            })\r\n            .catch((e)=>{\r\n                console.log(e);\r\n            });\r\n        }   catch{\r\n        console.log('Error!');\r\n    }\r\n}\r\nexport const NewPost =(post,author) => async (dispatch) =>\r\n{\r\n    try {\r\n        debugger;\r\n        post.author= author;\r\n        let token =  localStorage.getItem(\"token\");\r\n        post._id  = null;\r\n        post.location ={};\r\n        post.viewersCount = 0;\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            mode:'cors',\r\n            headers: { \r\n                \"Content-type\": \"application/json; charset=UTF-8\",\r\n                \"Token\": token\r\n            },\r\n            body: JSON.stringify({...post})\r\n        };\r\n        debugger;\r\n        fetch(urlApi+'/post/createPost', requestOptions)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                const res = {data};\r\n                dispatch(new_Post(res));\r\n            })\r\n            .catch((e)=>{\r\n                \r\n                console.log(e);\r\n            });\r\n           \r\n        } catch{\r\n        dispatch(set_Loading(false));\r\n        console.log('Error!');\r\n    }\r\n} \r\n\r\nexport const EditPost = (post)=>async (dispatch) =>\r\n{\r\n    try {\r\n        try {\r\n            let token =  localStorage.getItem(\"token\");\r\n            post.author=\"tesast@mail.com\";\r\n            post.location ={};\r\n            const requestOptions = {\r\n                method: 'patch',\r\n                mode:'cors',\r\n                headers: { \r\n                    \"Content-type\": \"application/json; charset=UTF-8\",\r\n                    \"Token\": token\r\n                },\r\n                body: JSON.stringify({\r\n                        ...post\r\n                })\r\n            };\r\n            \r\n            fetch(urlApi+'/post/updatePost', requestOptions)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    const res = {data};\r\n                    dispatch(edit_Post(res));\r\n                })\r\n                .catch((e)=>{\r\n                    console.log(e);\r\n                });\r\n               \r\n            } catch{\r\n            dispatch(set_Loading(false));\r\n            console.log('Error!');\r\n        }\r\n    } catch{\r\n        console.log('Error!');\r\n    }\r\n}\r\n\r\nfunction urltoFile(url, filename, mimeType){\r\n    return (fetch(url)\r\n        .then(function(res){return res.arrayBuffer();})\r\n        .then(function(buf){return new File([buf], filename,{type:mimeType});})\r\n    );\r\n}\r\n\r\nexport const arrayBufferToBase64 = (buffer) => {\r\n    debugger;\r\n    var binary = '';\r\n    var bytes = [].slice.call(new Uint8Array(buffer));\r\n    bytes.forEach((b) => binary += String.fromCharCode(b));\r\n    return window.btoa(binary);\r\n};"]},"metadata":{},"sourceType":"module"}