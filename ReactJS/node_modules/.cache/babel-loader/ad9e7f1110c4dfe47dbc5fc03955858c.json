{"ast":null,"code":"import { LOG_OUT, SET_USER, SET_MESSAGE, SET_POST, DELETE_POST, NEW_POST, EDIT_POST, SET_LOADING, SET_PAGING } from '../User/typeUser';\nconst defaultState = {\n  loggedIn: false,\n  user: {},\n  posts: [],\n  loading: false,\n  page: 0,\n  errorMessage: null\n};\n\nconst userReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case SET_USER:\n      debugger;\n      return {\n        loggedIn: true,\n        user: { ...action.payload\n        }\n      };\n\n    case LOG_OUT:\n      localStorage.clear();\n      return {\n        loggedIn: false,\n        user: {}\n      };\n\n    case SET_POST:\n      return { ...state,\n        posts: [...action.payload]\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        posts: [...state.notes.filter(post => post.id !== action.payload.value.id)]\n      };\n\n    case NEW_POST:\n      {\n        if (!state.posts.find(i => i._id === action.payload._id)) return { ...state,\n          posts: [...state.posts, action.payload]\n        };\n        return state;\n      }\n\n    case SET_LOADING:\n      return { ...state,\n        loading: action.payload\n      };\n\n    case SET_PAGING:\n      return { ...state,\n        page: action.payload\n      };\n\n    case EDIT_POST:\n      let posts = state.posts.map(post => {\n        debugger;\n\n        if (post.id === action.payload._id) {\n          post = action.payload;\n        }\n\n        return post;\n      });\n      return { ...state,\n        posts: [...posts]\n      };\n\n    case SET_MESSAGE:\n      return { ...state,\n        errorMessage: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;","map":{"version":3,"sources":["D:/Source/Project/ReactJS/src/redux/User/userReducer.js"],"names":["LOG_OUT","SET_USER","SET_MESSAGE","SET_POST","DELETE_POST","NEW_POST","EDIT_POST","SET_LOADING","SET_PAGING","defaultState","loggedIn","user","posts","loading","page","errorMessage","userReducer","state","action","type","payload","localStorage","clear","notes","filter","post","id","value","find","i","_id","map"],"mappings":"AAAA,SAAQA,OAAR,EAAgBC,QAAhB,EAAyBC,WAAzB,EAAqCC,QAArC,EAA+CC,WAA/C,EAA4DC,QAA5D,EAAsEC,SAAtE,EAAiFC,WAAjF,EAA8FC,UAA9F,QAA+G,kBAA/G;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,KADO;AAEjBC,EAAAA,IAAI,EAAE,EAFW;AAGjBC,EAAAA,KAAK,EAAE,EAHU;AAIjBC,EAAAA,OAAO,EAAE,KAJQ;AAKjBC,EAAAA,IAAI,EAAE,CALW;AAMjBC,EAAAA,YAAY,EAAC;AANI,CAArB;;AASA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AAClD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKlB,QAAL;AACI;AACA,aAAO;AACHS,QAAAA,QAAQ,EAAE,IADP;AAEHC,QAAAA,IAAI,EAAE,EAAC,GAAGO,MAAM,CAACE;AAAX;AAFH,OAAP;;AAIJ,SAAKpB,OAAL;AACIqB,MAAAA,YAAY,CAACC,KAAb;AACA,aAAO;AACHZ,QAAAA,QAAQ,EAAE,KADP;AAEHC,QAAAA,IAAI,EAAE;AAFH,OAAP;;AAIA,SAAKR,QAAL;AACA,aAAO,EAAE,GAAGc,KAAL;AAAYL,QAAAA,KAAK,EAAE,CAAC,GAAGM,MAAM,CAACE,OAAX;AAAnB,OAAP;;AACJ,SAAKhB,WAAL;AACI,aAAO,EACH,GAAGa,KADA;AACOL,QAAAA,KAAK,EAAE,CAAC,GAAGK,KAAK,CAACM,KAAN,CAAYC,MAAZ,CAAmBC,IAAI,IACxCA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACE,OAAP,CAAeO,KAAf,CAAqBD,EADhB,CAAJ;AADd,OAAP;;AAIJ,SAAKrB,QAAL;AACI;AACI,YAAI,CAACY,KAAK,CAACL,KAAN,CAAYgB,IAAZ,CAAiBC,CAAC,IAAIA,CAAC,CAACC,GAAF,KAAUZ,MAAM,CAACE,OAAP,CAAeU,GAA/C,CAAL,EACI,OAAO,EAAE,GAAGb,KAAL;AAAYL,UAAAA,KAAK,EAAE,CAAC,GAAGK,KAAK,CAACL,KAAV,EAAiBM,MAAM,CAACE,OAAxB;AAAnB,SAAP;AACJ,eAAOH,KAAP;AACH;;AACL,SAAKV,WAAL;AACI,aAAO,EAAE,GAAGU,KAAL;AAAYJ,QAAAA,OAAO,EAAEK,MAAM,CAACE;AAA5B,OAAP;;AACJ,SAAKZ,UAAL;AACI,aAAO,EAAE,GAAGS,KAAL;AAAYH,QAAAA,IAAI,EAAEI,MAAM,CAACE;AAAzB,OAAP;;AACJ,SAAKd,SAAL;AACI,UAAIM,KAAK,GAAGK,KAAK,CAACL,KAAN,CAAYmB,GAAZ,CAAgBN,IAAI,IAAI;AAChC;;AACA,YAAIA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACE,OAAP,CAAeU,GAA/B,EAAoC;AAChCL,UAAAA,IAAI,GAAGP,MAAM,CAACE,OAAd;AACH;;AACD,eAAOK,IAAP;AACH,OANW,CAAZ;AAOA,aAAO,EAAE,GAAGR,KAAL;AAAYL,QAAAA,KAAK,EAAE,CAAC,GAAGA,KAAJ;AAAnB,OAAP;;AACJ,SAAKV,WAAL;AACI,aAAM,EACF,GAAGe,KADD;AACOF,QAAAA,YAAY,EAACG,MAAM,CAACE;AAD3B,OAAN;;AAGJ;AAAS,aAAOH,KAAP;AA3Cb;AA6CH,CA9CD;;AAgDA,eAAeD,WAAf","sourcesContent":["import {LOG_OUT,SET_USER,SET_MESSAGE,SET_POST, DELETE_POST, NEW_POST, EDIT_POST, SET_LOADING, SET_PAGING} from '../User/typeUser';\r\n\r\nconst defaultState = {\r\n    loggedIn: false,\r\n    user: {},\r\n    posts: [],\r\n    loading: false,\r\n    page: 0,\r\n    errorMessage:null\r\n}\r\n\r\nconst userReducer = (state = defaultState, action) => {\r\n    switch(action.type){\r\n        case SET_USER:\r\n            debugger;\r\n            return {\r\n                loggedIn: true,\r\n                user: {...action.payload}\r\n            }\r\n        case LOG_OUT:\r\n            localStorage.clear()\r\n            return {\r\n                loggedIn: false,\r\n                user: {}\r\n            }\r\n            case SET_POST:\r\n            return { ...state, posts: [...action.payload] };\r\n        case DELETE_POST:\r\n            return {\r\n                ...state, posts: [...state.notes.filter(post =>\r\n                    post.id !== action.payload.value.id)]\r\n            }\r\n        case NEW_POST:\r\n            {\r\n                if (!state.posts.find(i => i._id === action.payload._id))\r\n                    return { ...state, posts: [...state.posts, action.payload] }\r\n                return state;\r\n            }\r\n        case SET_LOADING:\r\n            return { ...state, loading: action.payload }\r\n        case SET_PAGING:\r\n            return { ...state, page: action.payload}\r\n        case EDIT_POST:\r\n            let posts = state.posts.map(post => {\r\n                debugger;\r\n                if (post.id === action.payload._id) {\r\n                    post = action.payload\r\n                }\r\n                return post;\r\n            })\r\n            return { ...state, posts: [...posts] }\r\n        case SET_MESSAGE:\r\n            return{\r\n                ...state,errorMessage:action.payload\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default userReducer"]},"metadata":{},"sourceType":"module"}