{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Source\\\\TestExistekCrud\\\\ReactJS\\\\src\\\\components\\\\Posts\\\\PostForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './Posts.css';\nimport { Button, Form } from 'semantic-ui-react';\nimport { Link } from \"react-router-dom\";\nimport ImageUploading from 'react-images-uploading';\nimport addImg from '../../public_img/addImg.png';\nimport { Image } from 'semantic-ui-react';\n\nconst PostForm = props => {\n  _s();\n\n  const [modalPost, setModalPost] = useState({\n    tiltle: '',\n    description: '',\n    imgUrl: '',\n    dateCreated: ''\n  });\n  useEffect(() => {\n    setModalPost(props.Post);\n  }, [props.Post]);\n\n  const inputGroupChangeHandler = event => {\n    setModalPost(prevState => ({ ...prevState,\n      [event.target.id]: event.target.value\n    }));\n  };\n\n  const SetImages = event => {\n    debugger;\n    setModalPost(prevState => ({ ...prevState,\n      images: event\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    size: \"huge\",\n    className: \"cr-up-form\",\n    onSubmit: event => {\n      console.log('submit');\n      event.preventDefault();\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      widths: 2,\n      className: \"form-cr-up-post\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"\\u041D\\u0430\\u0437\\u0432\\u0430\",\n        type: \"text\",\n        id: \"tiltle\",\n        width: 8,\n        name: \"tiltle\",\n        value: !modalPost ? '' : modalPost.tiltle,\n        onChange: event => inputGroupChangeHandler(event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.TextArea, {\n        label: \"\\u0417\\u043C\\u0456\\u0441\\u0442\",\n        type: \"text\",\n        id: \"description\",\n        width: 8,\n        name: \"description\",\n        value: !modalPost ? '' : modalPost.location,\n        onChange: event => inputGroupChangeHandler(event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      children: /*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"\\u041F\\u043E\\u0441\\u0438\\u043B\\u0430\\u043D\\u043D\\u044F \\u043D\\u0430 \\u0444\\u043E\\u0442\\u043E\",\n        type: \"text\",\n        id: \"imgUrl\",\n        width: 16,\n        name: \"imgUrl\",\n        value: !modalPost ? '' : modalPost.description,\n        onChange: event => inputGroupChangeHandler(event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cr-up-submit-button\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        as: Link,\n        to: \"/\",\n        type: \"submit\",\n        onClick: () => {\n          props.SubmitPostForm(modalPost);\n        },\n        variant: \"primary\",\n        children: \"\\u0417\\u0431\\u0435\\u0440\\u0435\\u0433\\u0442\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this);\n};\n\n_s(PostForm, \"3czxN8Obmgl5CGGK8McRmB6FeT8=\");\n\n_c = PostForm;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["D:/Source/TestExistekCrud/ReactJS/src/components/Posts/PostForm.js"],"names":["React","useState","useEffect","Button","Form","Link","ImageUploading","addImg","Image","PostForm","props","modalPost","setModalPost","tiltle","description","imgUrl","dateCreated","Post","inputGroupChangeHandler","event","prevState","target","id","value","SetImages","images","console","log","preventDefault","location","SubmitPostForm"],"mappings":"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","sourcesContent":["import React, { useState , useEffect } from 'react';\r\nimport './Posts.css';\r\nimport {Button,Form,} from 'semantic-ui-react'\r\nimport {Link}  from \"react-router-dom\";\r\nimport ImageUploading from 'react-images-uploading';\r\nimport addImg from '../../public_img/addImg.png'\r\nimport { Image } from 'semantic-ui-react'\r\n\r\n\r\n const PostForm  = (props)=>{\r\n  const [modalPost, setModalPost] = useState({\r\n    tiltle:'',\r\n    description:'',\r\n    imgUrl:'',\r\n    dateCreated:'',\r\n \r\n  });\r\n  useEffect(() => {\r\n      setModalPost(props.Post);\r\n  }, [props.Post]);\r\n\r\n  const inputGroupChangeHandler = (event) => {\r\n  setModalPost((prevState) => ({\r\n    ...prevState,\r\n    [event.target.id]: event.target.value\r\n    }));\r\n  }\r\n  const SetImages = (event) => {\r\n    debugger;\r\n    setModalPost((prevState) =>({\r\n      ...prevState,\r\n      images:event\r\n    }));\r\n  }\r\n  return (\r\n  <Form size='huge' className='cr-up-form' onSubmit={event => {\r\n    console.log('submit');\r\n    event.preventDefault();\r\n    }}>\r\n\r\n    <Form.Group  widths={2} className='form-cr-up-post'>\r\n      <Form.Input label='Назва'  type=\"text\" id='tiltle' width={8}\r\n           name=\"tiltle\"value={!modalPost ? '' : modalPost.tiltle}\r\n          onChange={event => inputGroupChangeHandler( event)}/>\r\n          \r\n      <Form.TextArea label='Зміст'  type=\"text\" id='description' width={8}\r\n        name=\"description\"value={!modalPost ? '' : modalPost.location}\r\n      onChange={event => inputGroupChangeHandler( event)}/>\r\n       </Form.Group>\r\n      <Form.Group>\r\n      <Form.Input label='Посилання на фото'  type=\"text\" id='imgUrl' width={16}\r\n           name=\"imgUrl\" value={!modalPost ? '' : modalPost.description}\r\n          onChange={event => inputGroupChangeHandler( event)}/>\r\n    </Form.Group>\r\n      <div className = 'cr-up-submit-button'>\r\n        <Button as={Link} to=\"/\" type='submit' onClick={()=>{ props.SubmitPostForm(modalPost)}} variant=\"primary\"   >\r\n          Зберегти\r\n        </Button>\r\n      </div>\r\n    \r\n  </Form>\r\n    );\r\n};\r\nexport default PostForm;\r\n\r\n"]},"metadata":{},"sourceType":"module"}