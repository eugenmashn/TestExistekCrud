{"ast":null,"code":"import { SET_NOTES, DELETE_NOTE, NEW_NOTE, EDIT_NOTE, SET_LOADING, SET_PAGING } from './typesPost';\nconst initialState = {\n  posts: [],\n  loading: false,\n  page: 0\n};\nexport default function postsReducer(state = initialState, action) {\n  switch (action.type) {\n    case SET_POST:\n      return { ...state,\n        posts: [...action.payload]\n      };\n\n    case DELETE_NOTE:\n      return { ...state,\n        posts: [...state.notes.filter(post => post.id !== action.payload.value.id)]\n      };\n\n    case NEW_NOTE:\n      {\n        if (!state.posts.find(i => i._id === action.payload._id)) return { ...state,\n          posts: [...state.posts, action.payload]\n        };\n        return state;\n      }\n\n    case SET_LOADING:\n      return { ...state,\n        loading: action.payload\n      };\n\n    case SET_PAGING:\n      return { ...state,\n        page: action.payload\n      };\n\n    case EDIT_NOTE:\n      let posts = state.posts.map(post => {\n        debugger;\n\n        if (post.id === action.payload._id) {\n          post = action.payload;\n        }\n\n        return post;\n      });\n      return { ...state,\n        posts: [...posts]\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["D:/Source/Project/ReactJS/src/redux/Post/postReducer.js"],"names":["SET_NOTES","DELETE_NOTE","NEW_NOTE","EDIT_NOTE","SET_LOADING","SET_PAGING","initialState","posts","loading","page","postsReducer","state","action","type","SET_POST","payload","notes","filter","post","id","value","find","i","_id","map"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,WAApB,EAAiCC,QAAjC,EAA2CC,SAA3C,EAAsDC,WAAtD,EAAmEC,UAAnE,QAAqF,aAArF;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,OAAO,EAAE,KAFQ;AAGjBC,EAAAA,IAAI,EAAE;AAHW,CAArB;AAKA,eAAe,SAASC,YAAT,CAAsBC,KAAK,GAAGL,YAA9B,EAA4CM,MAA5C,EAAoD;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKC,QAAL;AACI,aAAO,EAAE,GAAGH,KAAL;AAAYJ,QAAAA,KAAK,EAAE,CAAC,GAAGK,MAAM,CAACG,OAAX;AAAnB,OAAP;;AACJ,SAAKd,WAAL;AACI,aAAO,EACH,GAAGU,KADA;AACOJ,QAAAA,KAAK,EAAE,CAAC,GAAGI,KAAK,CAACK,KAAN,CAAYC,MAAZ,CAAmBC,IAAI,IACxCA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACG,OAAP,CAAeK,KAAf,CAAqBD,EADhB,CAAJ;AADd,OAAP;;AAIJ,SAAKjB,QAAL;AACI;AACI,YAAI,CAACS,KAAK,CAACJ,KAAN,CAAYc,IAAZ,CAAiBC,CAAC,IAAIA,CAAC,CAACC,GAAF,KAAUX,MAAM,CAACG,OAAP,CAAeQ,GAA/C,CAAL,EACI,OAAO,EAAE,GAAGZ,KAAL;AAAYJ,UAAAA,KAAK,EAAE,CAAC,GAAGI,KAAK,CAACJ,KAAV,EAAiBK,MAAM,CAACG,OAAxB;AAAnB,SAAP;AACJ,eAAOJ,KAAP;AACH;;AACL,SAAKP,WAAL;AACI,aAAO,EAAE,GAAGO,KAAL;AAAYH,QAAAA,OAAO,EAAEI,MAAM,CAACG;AAA5B,OAAP;;AACJ,SAAKV,UAAL;AACI,aAAO,EAAE,GAAGM,KAAL;AAAYF,QAAAA,IAAI,EAAEG,MAAM,CAACG;AAAzB,OAAP;;AACJ,SAAKZ,SAAL;AACI,UAAII,KAAK,GAAGI,KAAK,CAACJ,KAAN,CAAYiB,GAAZ,CAAgBN,IAAI,IAAI;AAChC;;AACA,YAAIA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACG,OAAP,CAAeQ,GAA/B,EAAoC;AAChCL,UAAAA,IAAI,GAAGN,MAAM,CAACG,OAAd;AACH;;AACD,eAAOG,IAAP;AACH,OANW,CAAZ;AAOA,aAAO,EAAE,GAAGP,KAAL;AAAYJ,QAAAA,KAAK,EAAE,CAAC,GAAGA,KAAJ;AAAnB,OAAP;;AACJ;AACI,aAAOI,KAAP;AA5BR;AA8BH","sourcesContent":["import { SET_NOTES, DELETE_NOTE, NEW_NOTE, EDIT_NOTE, SET_LOADING, SET_PAGING } from './typesPost';\r\n\r\nconst initialState = {\r\n    posts: [],\r\n    loading: false,\r\n    page: 0\r\n}\r\nexport default function postsReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_POST:\r\n            return { ...state, posts: [...action.payload] };\r\n        case DELETE_NOTE:\r\n            return {\r\n                ...state, posts: [...state.notes.filter(post =>\r\n                    post.id !== action.payload.value.id)]\r\n            }\r\n        case NEW_NOTE:\r\n            {\r\n                if (!state.posts.find(i => i._id === action.payload._id))\r\n                    return { ...state, posts: [...state.posts, action.payload] }\r\n                return state;\r\n            }\r\n        case SET_LOADING:\r\n            return { ...state, loading: action.payload }\r\n        case SET_PAGING:\r\n            return { ...state, page: action.payload}\r\n        case EDIT_NOTE:\r\n            let posts = state.posts.map(post => {\r\n                debugger;\r\n                if (post.id === action.payload._id) {\r\n                    post = action.payload\r\n                }\r\n                return post;\r\n            })\r\n            return { ...state, posts: [...posts] }\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}