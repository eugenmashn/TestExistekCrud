{"ast":null,"code":"import { SET_NOTES, DELETE_NOTE, NEW_NOTE, EDIT_NOTE, SET_LOADING } from './types';\nconst initialState = {\n  posts: [],\n  loading: false\n};\nexport default function postsReducer(state = initialState, action) {\n  switch (action.type) {\n    case SET_NOTES:\n      return { ...state,\n        posts: [...action.payload]\n      };\n\n    case DELETE_NOTE:\n      return { ...state,\n        posts: [...state.notes.filter(post => post.id !== action.payload.value.id)]\n      };\n\n    case NEW_NOTE:\n      return { ...state,\n        posts: [...state.posts, action.payload.value]\n      };\n\n    case SET_LOADING:\n      return { ...state,\n        loading: action.value\n      };\n\n    case EDIT_NOTE:\n      let posts = state.posts.map(post => {\n        debugger;\n\n        if (post.id === action.payload.value.id) {\n          post = action.payload.value;\n        }\n\n        return post;\n      });\n      return { ...state,\n        posts: [...posts]\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["D:/Source/ClientAppBBB/clientapp/src/redux/postReducer.js"],"names":["SET_NOTES","DELETE_NOTE","NEW_NOTE","EDIT_NOTE","SET_LOADING","initialState","posts","loading","postsReducer","state","action","type","payload","notes","filter","post","id","value","map"],"mappings":"AAAA,SAAQA,SAAR,EAAkBC,WAAlB,EAA8BC,QAA9B,EAAuCC,SAAvC,EAAiDC,WAAjD,QAAmE,SAAnE;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,OAAO,EAAC;AAFS,CAArB;AAIA,eAAe,SAASC,YAAT,CAAsBC,KAAK,GAAGJ,YAA9B,EAA4CK,MAA5C,EAAoD;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKX,SAAL;AACI,aAAO,EAAE,GAAGS,KAAL;AAAYH,QAAAA,KAAK,EAAE,CAAC,GAAGI,MAAM,CAACE,OAAX;AAAnB,OAAP;;AACJ,SAAKX,WAAL;AACI,aAAO,EACH,GAAGQ,KADA;AACOH,QAAAA,KAAK,EAAE,CAAC,GAAGG,KAAK,CAACI,KAAN,CAAYC,MAAZ,CAAmBC,IAAI,IACxCA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACE,OAAP,CAAeK,KAAf,CAAqBD,EADhB,CAAJ;AADd,OAAP;;AAIJ,SAAKd,QAAL;AACI,aAAO,EAAE,GAAGO,KAAL;AAAYH,QAAAA,KAAK,EAAE,CAAC,GAAGG,KAAK,CAACH,KAAV,EAAiBI,MAAM,CAACE,OAAP,CAAeK,KAAhC;AAAnB,OAAP;;AACJ,SAAKb,WAAL;AACI,aAAO,EAAC,GAAGK,KAAJ;AAAUF,QAAAA,OAAO,EAACG,MAAM,CAACO;AAAzB,OAAP;;AACJ,SAAKd,SAAL;AACI,UAAIG,KAAK,GAAGG,KAAK,CAACH,KAAN,CAAYY,GAAZ,CAAgBH,IAAI,IAAI;AAChC;;AACA,YAAIA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACE,OAAP,CAAeK,KAAf,CAAqBD,EAArC,EAAyC;AACrCD,UAAAA,IAAI,GAAGL,MAAM,CAACE,OAAP,CAAeK,KAAtB;AACH;;AACD,eAAOF,IAAP;AACH,OANW,CAAZ;AAOA,aAAO,EAAE,GAAGN,KAAL;AAAYH,QAAAA,KAAK,EAAE,CAAC,GAAGA,KAAJ;AAAnB,OAAP;;AACJ;AACI,aAAOG,KAAP;AAtBR;AAwBH","sourcesContent":["import {SET_NOTES,DELETE_NOTE,NEW_NOTE,EDIT_NOTE,SET_LOADING} from './types';\r\n\r\nconst initialState = {\r\n    posts: [],\r\n    loading:false\r\n}\r\nexport default function postsReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_NOTES:\r\n            return { ...state, posts: [...action.payload] };\r\n        case DELETE_NOTE:\r\n            return {\r\n                ...state, posts: [...state.notes.filter(post =>\r\n                    post.id !== action.payload.value.id)]\r\n            }\r\n        case NEW_NOTE:\r\n            return { ...state, posts: [...state.posts, action.payload.value] }\r\n        case SET_LOADING:\r\n            return {...state,loading:action.value}\r\n        case EDIT_NOTE:\r\n            let posts = state.posts.map(post => {\r\n                debugger;\r\n                if (post.id === action.payload.value.id) {\r\n                    post = action.payload.value\r\n                }\r\n                return post;\r\n            })\r\n            return { ...state, posts: [...posts] }\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}