{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Source\\\\ClientAppBBB\\\\clientapp\\\\src\\\\components\\\\Posts\\\\EditPost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './Posts.css';\nimport { new_Post, edit_Post } from '../../redux/actions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Button, Checkbox, Form, Input, Radio, Select, TextArea } from 'semantic-ui-react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from \"react-router-dom\";\nimport { GetPost } from '../../services/post_services';\n\nfunction EditPost(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  let post = props.post;\n  let id = props.match.params.id;\n  useEffect(() => {\n    GetPost(dispatch, id);\n  }, []);\n  const [modalPost, setModalPost] = useState({\n    header: '',\n    description: '',\n    UrlImg: '',\n    location: '',\n    createDate: ''\n  });\n\n  const SubmitPostFormCreate = () => {\n    modalPost.id = 10;\n\n    if (modalPost.Name !== '') {\n      debugger;\n      props.addNewPost(modalPost);\n    } else {\n      console.log('error');\n    }\n  };\n\n  const SubmitPostFormUpdate = () => {\n    modalPost.id = 10;\n\n    if (modalPost.Name !== '') {\n      props.updatePost(modalPost);\n    } else {\n      console.log('error');\n    }\n  };\n\n  post = useSelector(state => state.posts.posts.find(i => i._id == props.id));\n  debugger;\n\n  if (props.match.params.id && post) {\n    return /*#__PURE__*/_jsxDEV(CrUpPost, {\n      modalPost: modalPost,\n      setModalPost: setModalPost,\n      SubmitPostForm: SubmitPostFormUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CrUpPost, {\n    modalPost: modalPost,\n    setModalPost: setModalPost,\n    SubmitPostForm: SubmitPostFormCreate\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 10\n  }, this);\n}\n\n_s(EditPost, \"tTDKp6/IdPpKi4hwJNxUDWTBHq4=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = EditPost;\n\nconst CrUpPost = ({\n  modalPost,\n  setModalPost,\n  SubmitPostForm\n}) => {\n  const inputGroupChangeHandler = event => {\n    setModalPost(prevState => ({ ...prevState,\n      [event.target.id]: event.target.value\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    className: \"cr-up-form\",\n    onSubmit: event => {\n      console.log('submit');\n      event.preventDefault();\n    },\n    children: /*#__PURE__*/_jsxDEV(Form.Group, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"\\u041D\\u0430\\u0437\\u0432\\u0430\",\n        type: \"text\",\n        id: \"Name\",\n        width: 6,\n        name: \"Name\",\n        value: modalPost === null ? '' : modalPost.value,\n        onChange: event => inputGroupChangeHandler(event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\u041E\\u043F\\u0438\\u0441\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"Description\",\n        name: \"Description\",\n        value: modalPost === null ? '' : modalPost.value,\n        onChange: event => inputGroupChangeHandler(event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" \\u0421\\u0438\\u043B\\u043A\\u0430 \\u043D\\u0430 \\u0444\\u043E\\u0442\\u043E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"UrlImg\",\n        name: \"UrlImg\",\n        value: modalPost === null ? '' : modalPost.value,\n        onChange: event => inputGroupChangeHandler(event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cr-up-submit-button\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          as: Link,\n          to: \"/\",\n          type: \"submit\",\n          onClick: SubmitPostForm,\n          variant: \"primary\",\n          children: \"\\u0417\\u0431\\u0435\\u0440\\u0435\\u0433\\u0442\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 3\n  }, this);\n};\n\n_c2 = CrUpPost;\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    addNewPost: newPost => {\n      dispatch(new_Post(newPost));\n    },\n    updatePost: post => {\n      dispatch(edit_Post(post));\n    }\n  };\n};\n\nlet mapStateToProps = state => {\n  return {\n    posts: state.posts\n  };\n};\n\nEditPost.propTypes = {\n  editMode: PropTypes.bool,\n  post: PropTypes.object\n};\nconst CreateEditPost = connect(mapStateToProps, mapDispatchToProps)(EditPost);\nexport default CreateEditPost;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditPost\");\n$RefreshReg$(_c2, \"CrUpPost\");","map":{"version":3,"sources":["D:/Source/ClientAppBBB/clientapp/src/components/Posts/EditPost.js"],"names":["React","useState","useEffect","new_Post","edit_Post","connect","PropTypes","Button","Checkbox","Form","Input","Radio","Select","TextArea","useSelector","useDispatch","Link","GetPost","EditPost","props","dispatch","post","id","match","params","modalPost","setModalPost","header","description","UrlImg","location","createDate","SubmitPostFormCreate","Name","addNewPost","console","log","SubmitPostFormUpdate","updatePost","state","posts","find","i","_id","CrUpPost","SubmitPostForm","inputGroupChangeHandler","event","prevState","target","value","preventDefault","mapDispatchToProps","newPost","mapStateToProps","propTypes","editMode","bool","object","CreateEditPost"],"mappings":"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","sourcesContent":["  \r\nimport React, { useState , useEffect } from 'react';\r\nimport './Posts.css';\r\nimport {new_Post,edit_Post} from '../../redux/actions'\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  Form,\r\n  Input,\r\n  Radio,\r\n  Select,\r\n  TextArea,\r\n} from 'semantic-ui-react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport {Link}  from \"react-router-dom\";\r\nimport { GetPost } from '../../services/post_services';\r\n\r\nfunction EditPost(props) {\r\n  const dispatch = useDispatch();\r\n  let post = props.post; \r\n  let id = props.match.params.id;\r\n    useEffect(() => {\r\n        GetPost(dispatch,id);\r\n        }, []);\r\n\r\n  const [modalPost, setModalPost] = useState({\r\n                                    header:'',\r\n                                    description:'',\r\n                                    UrlImg:'',\r\n                                    location:'',\r\n                                    createDate:''\r\n                                  });\r\n  const  SubmitPostFormCreate = ()=> {\r\n    \r\n    modalPost.id=10;\r\n    if(modalPost.Name !== ''){\r\n      debugger;\r\n      props.addNewPost(modalPost);\r\n    }\r\n    else{\r\n      console.log('error');\r\n    }\r\n       \r\n\r\n  }\r\n\r\n  const SubmitPostFormUpdate = () => {\r\n    modalPost.id=10;\r\n    if(modalPost.Name !== ''){\r\n      props.updatePost(modalPost);\r\n    }\r\n    else{\r\n      console.log('error');\r\n    }\r\n       \r\n  }\r\n  post=useSelector(state => state.posts.posts.find(i => i._id == props.id));\r\n\r\n  debugger;\r\n  if(props.match.params.id && post)\r\n  {\r\n    \r\n    \r\n    \r\n    return <CrUpPost modalPost={modalPost} setModalPost={setModalPost} SubmitPostForm = {SubmitPostFormUpdate}/>\r\n  }\r\n  return <CrUpPost modalPost={modalPost} setModalPost={setModalPost} SubmitPostForm = {SubmitPostFormCreate}/>\r\n}\r\n\r\nconst CrUpPost  = ({modalPost,setModalPost,SubmitPostForm})=>{\r\n    \r\n  \r\n  \r\n  const inputGroupChangeHandler = (event) => {\r\n  setModalPost((prevState) => ({\r\n  ...prevState,\r\n  [event.target.id]: event.target.value\r\n  }));\r\n  }\r\n  return (\r\n  <Form className='cr-up-form' onSubmit={event => {\r\n    console.log('submit');\r\n    event.preventDefault();\r\n    }}>\r\n\r\n    <Form.Group>\r\n      <Form.Input label='Назва'  type=\"text\" id='Name' width={6}\r\n           name=\"Name\"value={modalPost === null ? '' : modalPost.value}\r\n          onChange={event => inputGroupChangeHandler( event)}/>\r\n\r\n    \r\n\r\n    \r\n      <label>Опис</label>\r\n      <input type=\"text\" id='Description' name=\"Description\"value={modalPost === null ? '' : modalPost.value}\r\n      onChange={event => inputGroupChangeHandler( event)} />\r\n    \r\n      <label> Силка на фото</label>\r\n      <input type=\"text\" id='UrlImg' name=\"UrlImg\"value={modalPost === null ? '' : modalPost.value}\r\n      onChange={event => inputGroupChangeHandler( event)} />\r\n      \r\n      <div className = 'cr-up-submit-button'>\r\n        <Button as={Link} to=\"/\" type='submit' onClick={SubmitPostForm} variant=\"primary\"   >\r\n        Зберегти\r\n        </Button>\r\n      </div>\r\n    </Form.Group>\r\n  </Form>\r\n    );\r\n};\r\n\r\n\r\nlet mapDispatchToProps=(dispatch)=>{\r\n      return {\r\n          addNewPost:(newPost)=>{\r\n            \r\n              dispatch(new_Post(newPost))\r\n            },\r\n          updatePost:(post)=>{\r\n            dispatch(edit_Post(post))\r\n          },\r\n    }\r\n};\r\n\r\nlet mapStateToProps=(state)=>{\r\n  return{\r\n      posts:state.posts,\r\n  }\r\n};\r\n\r\nEditPost.propTypes = {\r\n  editMode: PropTypes.bool,\r\n  post: PropTypes.object\r\n};\r\n\r\n\r\nconst CreateEditPost = connect(mapStateToProps,mapDispatchToProps) (EditPost);\r\nexport default CreateEditPost;\r\n"]},"metadata":{},"sourceType":"module"}